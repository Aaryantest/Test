{
  "title": "B. The least round way",
  "time_limit": "time limit per test2 seconds",
  "memory_limit": "memory limit per test64 megabytes",
  "statement": "B. The least round waytime limit per test2 secondsmemory limit per test64 megabytesinputstdinoutputstdout\nB. The least round way\ntime limit per test2 seconds\ntime limit per test\nmemory limit per test64 megabytes\nmemory limit per test\ninputstdin\ninput\noutputstdout\noutput\nThere is a square matrix n × n, consisting of non-negative integer numbers. You should find such a way on it that   starts in the upper left cell of the matrix;  each following cell is to the right or down from the current cell;  the way ends in the bottom right cell. Moreover, if we multiply together all the numbers along the way, the result should be the least \"round\". In other words, it should end in the least possible number of zeros.\nThere is a square matrix n × n, consisting of non-negative integer numbers. You should find such a way on it that\nMoreover, if we multiply together all the numbers along the way, the result should be the least \"round\". In other words, it should end in the least possible number of zeros.\nInputThe first line contains an integer number n (2 ≤ n ≤ 1000), n is the size of the matrix. Then follow n lines containing the matrix elements (non-negative integer numbers not exceeding 109).\nInput\nThe first line contains an integer number n (2 ≤ n ≤ 1000), n is the size of the matrix. Then follow n lines containing the matrix elements (non-negative integer numbers not exceeding 109).\nOutputIn the first line print the least number of trailing zeros. In the second line print the correspondent way itself.\nOutput\nIn the first line print the least number of trailing zeros. In the second line print the correspondent way itself.\nExamplesInputCopy31 2 34 5 67 8 9OutputCopy0DDRR\nExamples\nInputCopy31 2 34 5 67 8 9OutputCopy0DDRR\nInputCopy31 2 34 5 67 8 9\nInputCopy\nCopy\nOutputCopy0DDRR\nOutputCopy\nCopy",
  "samples": [
    {
      "input": "31 2 34 5 67 8 9",
      "output": "0DDRR"
    }
  ],
  "tags": [
    "dp",
    "math",
    "*2000"
  ]
}